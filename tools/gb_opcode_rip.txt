3.3.1. 8-Bit Loads
1. LD nn,n
Description:
Put value nn into n.
Use with:
nn = B,C,D,E,H,L,BC,DE,HL,SP
n = 8 bit immediate value
Opcodes:
Instruction Parameters Opcode Cycles
LD B,n 06 8
LD C,n 0E 8
LD D,n 16 8
LD E,n 1E 8
LD H,n 26 8
LD L,n 2E 8
by DP Page 65
3.3.1. 8-Bit Loads Game BoyTM CPU Manual
2. LD r1,r2
Description:
Put value r2 into r1.
Use with:
r1,r2 = A,B,C,D,E,H,L,(HL)
Opcodes:
Instruction Parameters Opcode Cycles
LD A,A 7F 4
LD A,B 78 4
LD A,C 79 4
LD A,D 7A 4
LD A,E 7B 4
LD A,H 7C 4
LD A,L 7D 4
LD A,(HL) 7E 8
LD B,B 40 4
LD B,C 41 4
LD B,D 42 4
LD B,E 43 4
LD B,H 44 4
LD B,L 45 4
LD B,(HL) 46 8
LD C,B 48 4
LD C,C 49 4
LD C,D 4A 4
LD C,E 4B 4
LD C,H 4C 4
LD C,L 4D 4
LD C,(HL) 4E 8
LD D,B 50 4
LD D,C 51 4
Page 66 V 1.01
Game BoyTM CPU Manual 3.3.1. 8-Bit Loads
LD D,D 52 4
LD D,E 53 4
LD D,H 54 4
LD D,L 55 4
LD D,(HL) 56 8
LD E,B 58 4
LD E,C 59 4
LD E,D 5A 4
LD E,E 5B 4
LD E,H 5C 4
LD E,L 5D 4
LD E,(HL) 5E 8
LD H,B 60 4
LD H,C 61 4
LD H,D 62 4
LD H,E 63 4
LD H,H 64 4
LD H,L 65 4
LD H,(HL) 66 8
LD L,B 68 4
LD L,C 69 4
LD L,D 6A 4
LD L,E 6B 4
LD L,H 6C 4
LD L,L 6D 4
LD L,(HL) 6E 8
LD (HL),B 70 8
LD (HL),C 71 8
LD (HL),D 72 8
LD (HL),E 73 8
LD (HL),H 74 8
LD (HL),L 75 8
LD (HL),n 36 12
by DP Page 67
3.3.1. 8-Bit Loads Game BoyTM CPU Manual
3. LD A,n
Description:
Put value n into A.
Use with:
n = A,B,C,D,E,H,L,(BC),(DE),(HL),(nn),#
nn = two byte immediate value. (LS byte first.)
Opcodes:
Instruction Parameters Opcode Cycles
LD A,A 7F 4
LD A,B 78 4
LD A,C 79 4
LD A,D 7A 4
LD A,E 7B 4
LD A,H 7C 4
LD A,L 7D 4
LD A,(BC) 0A 8
LD A,(DE) 1A 8
LD A,(HL) 7E 8
LD A,(nn) FA 16
LD A,# 3E 8
Page 68 V 1.01
Game BoyTM CPU Manual 3.3.1. 8-Bit Loads
4. LD n,A
Description:
Put value A into n.
Use with:
n = A,B,C,D,E,H,L,(BC),(DE),(HL),(nn)
nn = two byte immediate value. (LS byte first.)
Opcodes:
Instruction Parameters Opcode Cycles
LD A,A 7F 4
LD B,A 47 4
LD C,A 4F 4
LD D,A 57 4
LD E,A 5F 4
LD H,A 67 4
LD L,A 6F 4
LD (BC),A 02 8
LD (DE),A 12 8
LD (HL),A 77 8
LD (nn),A EA 16
by DP Page 69
3.3.1. 8-Bit Loads Game BoyTM CPU Manual
5. LD A,(C)
Description:
Put value at address $FF00 + register C into A.
Same as: LD A,($FF00+C)
Opcodes:
Instruction Parameters Opcode Cycles
LD A,(C) F2 8
6. LD (C),A
Description:
Put A into address $FF00 + register C.
Opcodes:
Instruction Parameters Opcode Cycles
LD ($FF00+C),A E2 8
Page 70 V 1.01
Game BoyTM CPU Manual 3.3.1. 8-Bit Loads
7. LD A,(HLD)
Description: Same as: LDD A,(HL)
8. LD A,(HL-)
Description: Same as: LDD A,(HL)
9. LDD A,(HL)
Description:
Put value at address HL into A. Decrement HL.
Same as: LD A,(HL) - DEC HL
Opcodes:
Instruction Parameters Opcode Cycles
LD A,(HLD) 3A 8
LD A,(HL-) 3A 8
LDD A,(HL) 3A 8
by DP Page 71
3.3.1. 8-Bit Loads Game BoyTM CPU Manual
10. LD (HLD),A
Description: Same as: LDD (HL),A
11. LD (HL-),A
Description: Same as: LDD (HL),A
12. LDD (HL),A
Description:
Put A into memory address HL. Decrement HL.
Same as: LD (HL),A - DEC HL
Opcodes:
Instruction Parameters Opcode Cycles
LD (HLD),A 32 8
LD (HL-),A 32 8
LDD (HL),A 32 8
Page 72 V 1.01
Game BoyTM CPU Manual 3.3.1. 8-Bit Loads
13. LD A,(HLI)
Description: Same as: LDI A,(HL)
14. LD A,(HL+)
Description: Same as: LDI A,(HL)
15. LDI A,(HL)
Description:
Put value at address HL into A. Increment HL.
Same as: LD A,(HL) - INC HL
Opcodes:
Instruction Parameters Opcode Cycles
LD A,(HLI) 2A 8
LD A,(HL+) 2A 8
LDI A,(HL) 2A 8
by DP Page 73
3.3.1. 8-Bit Loads Game BoyTM CPU Manual
16. LD (HLI),A
Description: Same as: LDI (HL),A
17. LD (HL+),A
Description: Same as: LDI (HL),A
18. LDI (HL),A
Description:
Put A into memory address HL. Increment HL.
Same as: LD (HL),A - INC HL
Opcodes:
Instruction Parameters Opcode Cycles
LD (HLI),A 22 8
LD (HL+),A 22 8
LDI (HL),A 22 8
Page 74 V 1.01
Game BoyTM CPU Manual 3.3.1. 8-Bit Loads
19. LDH (n),A
Description:
Put A into memory address $FF00+n.
Use with:
n = one byte immediate value.
Opcodes:
Instruction Parameters Opcode Cycles
LD ($FF00+n),A E0 12
20. LDH A,(n)
Description:
Put memory address $FF00+n into A.
Use with:
n = one byte immediate value.
Opcodes:
Instruction Parameters Opcode Cycles
LD A,($FF00+n) F0 12
by DP Page 75
3.3.2. 16-Bit Loads Game BoyTM CPU Manual
3.3.2. 16-Bit Loads
1. LD n,nn
Description:
Put value nn into n.
Use with:
n = BC,DE,HL,SP
nn = 16 bit immediate value
Opcodes:
Instruction Parameters Opcode Cycles
LD BC,nn 01 12
LD DE,nn 11 12
LD HL,nn 21 12
LD SP,nn 31 12
2. LD SP,HL
Description:
Put HL into Stack Pointer (SP).
Opcodes:
Instruction Parameters Opcode Cycles
LD SP,HL F9 8
Page 76 V 1.01
Game BoyTM CPU Manual 3.3.2. 16-Bit Loads
3. LD HL,SP+n
Description: Same as: LDHL SP,n.
4. LDHL SP,n
Description:
Put SP + n effective address into HL.
Use with:
n = one byte signed immediate value.
Flags affected:
Z - Reset.
N - Reset.
H - Set or reset according to operation.
C - Set or reset according to operation.
Opcodes:
Instruction Parameters Opcode Cycles
LDHL SP,n F8 12
by DP Page 77
3.3.2. 16-Bit Loads Game BoyTM CPU Manual
5. LD (nn),SP
Description:
Put Stack Pointer (SP) at address n.
Use with:
nn = two byte immediate address.
Opcodes:
Instruction Parameters Opcode Cycles
LD (nn),SP 08 20
6. PUSH nn
Description:
Push register pair nn onto stack.
Decrement Stack Pointer (SP) twice.
Use with:
nn = AF,BC,DE,HL
Opcodes:
Instruction Parameters Opcode Cycles
PUSH AF F5 16
PUSH BC C5 16
PUSH DE D5 16
PUSH HL E5 16
Page 78 V 1.01
Game BoyTM CPU Manual 3.3.2. 16-Bit Loads
7. POP nn
Description:
Pop two bytes off stack into register pair nn.
Increment Stack Pointer (SP) twice.
Use with:
nn = AF,BC,DE,HL
Opcodes:
Instruction Parameters Opcode Cycles
POP AF F1 12
POP BC C1 12
POP DE D1 12
POP HL E1 12
by DP Page 79
3.3.3. 8-Bit ALU Game BoyTM CPU Manual
3.3.3. 8-Bit ALU
1. ADD A,n
Description:
Add n to A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Set if carry from bit 3.
C - Set if carry from bit 7.
Opcodes:
Instruction Parameters Opcode Cycles
ADD A,A 87 4
ADD A,B 80 4
ADD A,C 81 4
ADD A,D 82 4
ADD A,E 83 4
ADD A,H 84 4
ADD A,L 85 4
ADD A,(HL) 86 8
ADD A,# C6 8
Page 80 V 1.01
Game BoyTM CPU Manual 3.3.3. 8-Bit ALU
2. ADC A,n
Description:
Add n + Carry flag to A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Set if carry from bit 3.
C - Set if carry from bit 7.
Opcodes:
Instruction Parameters Opcode Cycles
ADC A,A 8F 4
ADC A,B 88 4
ADC A,C 89 4
ADC A,D 8A 4
ADC A,E 8B 4
ADC A,H 8C 4
ADC A,L 8D 4
ADC A,(HL) 8E 8
ADC A,# CE 8
by DP Page 81
3.3.3. 8-Bit ALU Game BoyTM CPU Manual
3. SUB n
Description:
Subtract n from A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Set.
H - Set if no borrow from bit 4.
C - Set if no borrow.
Opcodes:
Instruction Parameters Opcode Cycles
SUB A 97 4
SUB B 90 4
SUB C 91 4
SUB D 92 4
SUB E 93 4
SUB H 94 4
SUB L 95 4
SUB (HL) 96 8
SUB # D6 8
Page 82 V 1.01
Game BoyTM CPU Manual 3.3.3. 8-Bit ALU
4. SBC A,n
Description:
Subtract n + Carry flag from A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Set.
H - Set if no borrow from bit 4.
C - Set if no borrow.
Opcodes:
Instruction Parameters Opcode Cycles
SBC A,A 9F 4
SBC A,B 98 4
SBC A,C 99 4
SBC A,D 9A 4
SBC A,E 9B 4
SBC A,H 9C 4
SBC A,L 9D 4
SBC A,(HL) 9E 8
SBC A,# ?? ?
by DP Page 83
3.3.3. 8-Bit ALU Game BoyTM CPU Manual
5. AND n
Description:
Logically AND n with A, result in A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Set.
C - Reset.
Opcodes:
Instruction Parameters Opcode Cycles
AND A A7 4
AND B A0 4
AND C A1 4
AND D A2 4
AND E A3 4
AND H A4 4
AND L A5 4
AND (HL) A6 8
AND # E6 8
Page 84 V 1.01
Game BoyTM CPU Manual 3.3.3. 8-Bit ALU
6. OR n
Description:
Logical OR n with register A, result in A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Reset.
Opcodes:
Instruction Parameters Opcode Cycles
OR A B7 4
OR B B0 4
OR C B1 4
OR D B2 4
OR E B3 4
OR H B4 4
OR L B5 4
OR (HL) B6 8
OR # F6 8
by DP Page 85
3.3.3. 8-Bit ALU Game BoyTM CPU Manual
7. XOR n
Description:
Logical exclusive OR n with register A, result in A.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Reset.
Opcodes:
Instruction Parameters Opcode Cycles
XOR A AF 4
XOR B A8 4
XOR C A9 4
XOR D AA 4
XOR E AB 4
XOR H AC 4
XOR L AD 4
XOR (HL) AE 8
XOR * EE 8
Page 86 V 1.01
Game BoyTM CPU Manual 3.3.3. 8-Bit ALU
8. CP n
Description:
Compare A with n. This is basically an A - n
subtraction instruction but the results are thrown
away.
Use with:
n = A,B,C,D,E,H,L,(HL),#
Flags affected:
Z - Set if result is zero. (Set if A = n.)
N - Set.
H - Set if no borrow from bit 4.
C - Set for no borrow. (Set if A < n.)
Opcodes:
Instruction Parameters Opcode Cycles
CP A BF 4
CP B B8 4
CP C B9 4
CP D BA 4
CP E BB 4
CP H BC 4
CP L BD 4
CP (HL) BE 8
CP # FE 8
by DP Page 87
3.3.3. 8-Bit ALU Game BoyTM CPU Manual
9. INC n
Description:
Increment register n.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Set if carry from bit 3.
C - Not affected.
Opcodes:
Instruction Parameters Opcode Cycles
INC A 3C 4
INC B 04 4
INC C 0C 4
INC D 14 4
INC E 1C 4
INC H 24 4
INC L 2C 4
INC (HL) 34 12
Page 88 V 1.01
Game BoyTM CPU Manual 3.3.3. 8-Bit ALU
10. DEC n
Description:
Decrement register n.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if reselt is zero.
N - Set.
H - Set if no borrow from bit 4.
C - Not affected.
Opcodes:
Instruction Parameters Opcode Cycles
DEC A 3D 4
DEC B 05 4
DEC C 0D 4
DEC D 15 4
DEC E 1D 4
DEC H 25 4
DEC L 2D 4
DEC (HL) 35 12
by DP Page 89
3.3.4. 16-Bit Arithmetic Game BoyTM CPU Manual
3.3.4. 16-Bit Arithmetic
1. ADD HL,n
Description:
Add n to HL.
Use with:
n = BC,DE,HL,SP
Flags affected:
Z - Not affected.
N - Reset.
H - Set if carry from bit 11.
C - Set if carry from bit 15.
Opcodes:
Instruction Parameters Opcode Cycles
ADD HL,BC 09 8
ADD HL,DE 19 8
ADD HL,HL 29 8
ADD HL,SP 39 8
Page 90 V 1.01
Game BoyTM CPU Manual 3.3.4. 16-Bit Arithmetic
2. ADD SP,n
Description:
Add n to Stack Pointer (SP).
Use with:
n = one byte signed immediate value (#).
Flags affected:
Z - Reset.
N - Reset.
H - Set or reset according to operation.
C - Set or reset according to operation.
Opcodes:
Instruction Parameters Opcode Cycles
ADD SP,# E8 16
by DP Page 91
3.3.4. 16-Bit Arithmetic Game BoyTM CPU Manual
3. INC nn
Description:
Increment register nn.
Use with:
nn = BC,DE,HL,SP
Flags affected:
None.
Opcodes:
Instruction Parameters Opcode Cycles
INC BC 03 8
INC DE 13 8
INC HL 23 8
INC SP 33 8
Page 92 V 1.01
Game BoyTM CPU Manual 3.3.4. 16-Bit Arithmetic
4. DEC nn
Description:
Decrement register nn.
Use with:
nn = BC,DE,HL,SP
Flags affected:
None.
Opcodes:
Instruction Parameters Opcode Cycles
DEC BC 0B 8
DEC DE 1B 8
DEC HL 2B 8
DEC SP 3B 8
by DP Page 93
3.3.5. Miscellaneous Game BoyTM CPU Manual
3.3.5. Miscellaneous
1. SWAP n
Description:
Swap upper & lower nibles of n.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Reset.
Opcodes:
Instruction Parameters Opcode Cycles
SWAP A CB 37 8
SWAP B CB 30 8
SWAP C CB 31 8
SWAP D CB 32 8
SWAP E CB 33 8
SWAP H CB 34 8
SWAP L CB 35 8
SWAP (HL) CB 36 16
Page 94 V 1.01
Game BoyTM CPU Manual 3.3.5. Miscellaneous
2. DAA
Description:
Decimal adjust register A.
This instruction adjusts register A so that the
correct representation of Binary Coded Decimal (BCD)
is obtained.
Flags affected:
Z - Set if register A is zero.
N - Not affected.
H - Reset.
C - Set or reset according to operation.

Opcodes:
Instruction Parameters Opcode Cycles
DAA -/- 27 4
3. CPL
Description:
Complement A register. (Flip all bits.)
Flags affected:
Z - Not affected.
N - Set.
H - Set.
C - Not affected.
Opcodes:
Instruction Parameters Opcode Cycles
CPL -/- 2F 4
by DP Page 95
3.3.5. Miscellaneous Game BoyTM CPU Manual
4. CCF
Description:
Complement carry flag.
If C flag is set, then reset it.
If C flag is reset, then set it.
Flags affected:
Z - Not affected.
N - Reset.
H - Reset.
C - Complemented.
Opcodes:
Instruction Parameters Opcode Cycles
CCF -/- 3F 4
5. SCF
Description:
Set Carry flag.
Flags affected:
Z - Not affected.
N - Reset.
H - Reset.
C - Set.
Opcodes:
Instruction Parameters Opcode Cycles
SCF -/- 37 4
Page 96 V 1.01
Game BoyTM CPU Manual 3.3.5. Miscellaneous
6. NOP
Description:
No operation.
Opcodes:
Instruction Parameters Opcode Cycles
NOP -/- 00 4
7. HALT
Description:
Power down CPU until an interrupt occurs. Use this
when ever possible to reduce energy consumption.
Opcodes:
Instruction Parameters Opcode Cycles
HALT -/- 76 4
8. STOP
Description:
Halt CPU & LCD display until button pressed.
Opcodes:
Instruction Parameters Opcode Cycles
STOP -/- 10 00 4
by DP Page 97
3.3.5. Miscellaneous Game BoyTM CPU Manual
9. DI
Description:
This instruction disables interrupts but not
immediately. Interrupts are disabled after
instruction after DI is executed.
Flags affected:
None.
Opcodes:
Instruction Parameters Opcode Cycles
DI -/- F3 4
10. EI
Description:
Enable interrupts. This intruction enables interrupts
but not immediately. Interrupts are enabled after
instruction after EI is executed.
Flags affected:
None.
Opcodes:
Instruction Parameters Opcode Cycles
EI -/- FB 4
Page 98 V 1.01
Game BoyTM CPU Manual 3.3.6. Rotates & Shifts
3.3.6. Rotates & Shifts
1. RLCA
Description:
Rotate A left. Old bit 7 to Carry flag.
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 7 data.
Opcodes:
Instruction Parameters Opcode Cycles
RLCA -/- 07 4
2. RLA
Description:
Rotate A left through Carry flag.
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 7 data.
Opcodes:
Instruction Parameters Opcode Cycles
RLA -/- 17 4
by DP Page 99
3.3.6. Rotates & Shifts Game BoyTM CPU Manual
3. RRCA
Description:
Rotate A right. Old bit 0 to Carry flag.
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 0 data.
Opcodes:
Instruction Parameters Opcode Cycles
RRCA -/- 0F 4
4. RRA
Description:
Rotate A right through Carry flag.
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 0 data.
Opcodes:
Instruction Parameters Opcode Cycles
RRA -/- 1F 4
Page 100 V 1.01
Game BoyTM CPU Manual 3.3.6. Rotates & Shifts
5. RLC n
Description:
Rotate n left. Old bit 7 to Carry flag.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 7 data.
Opcodes:
Instruction Parameters Opcode Cycles
RLC A CB 07 8
RLC B CB 00 8
RLC C CB 01 8
RLC D CB 02 8
RLC E CB 03 8
RLC H CB 04 8
RLC L CB 05 8
RLC (HL) CB 06 16
by DP Page 101
3.3.6. Rotates & Shifts Game BoyTM CPU Manual
6. RL n
Description:
Rotate n left through Carry flag.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 7 data.
Opcodes:
Instruction Parameters Opcode Cycles
RL A CB 17 8
RL B CB 10 8
RL C CB 11 8
RL D CB 12 8
RL E CB 13 8
RL H CB 14 8
RL L CB 15 8
RL (HL) CB 16 16
Page 102 V 1.01
Game BoyTM CPU Manual 3.3.6. Rotates & Shifts
7. RRC n
Description:
Rotate n right. Old bit 0 to Carry flag.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 0 data.
Opcodes:
Instruction Parameters Opcode Cycles
RRC A CB 0F 8
RRC B CB 08 8
RRC C CB 09 8
RRC D CB 0A 8
RRC E CB 0B 8
RRC H CB 0C 8
RRC L CB 0D 8
RRC (HL) CB 0E 16
by DP Page 103
3.3.6. Rotates & Shifts Game BoyTM CPU Manual
8. RR n
Description:
Rotate n right through Carry flag.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 0 data.
Opcodes:
Instruction Parameters Opcode Cycles
RR A CB 1F 8
RR B CB 18 8
RR C CB 19 8
RR D CB 1A 8
RR E CB 1B 8
RR H CB 1C 8
RR L CB 1D 8
RR (HL) CB 1E 16
Page 104 V 1.01
Game BoyTM CPU Manual 3.3.6. Rotates & Shifts
9. SLA n
Description:
Shift n left into Carry. LSB of n set to 0.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 7 data.
Opcodes:
Instruction Parameters Opcode Cycles
SLA A CB 27 8
SLA B CB 20 8
SLA C CB 21 8
SLA D CB 22 8
SLA E CB 23 8
SLA H CB 24 8
SLA L CB 25 8
SLA (HL) CB 26 16
by DP Page 105
3.3.6. Rotates & Shifts Game BoyTM CPU Manual
10. SRA n
Description:
Shift n right into Carry. MSB doesn't change.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 0 data.
Opcodes:
Instruction Parameters Opcode Cycles
SRA A CB 2F 8
SRA B CB 28 8
SRA C CB 29 8
SRA D CB 2A 8
SRA E CB 2B 8
SRA H CB 2C 8
SRA L CB 2D 8
SRA (HL) CB 2E 16
Page 106 V 1.01
Game BoyTM CPU Manual 3.3.6. Rotates & Shifts
11. SRL n
Description:
Shift n right into Carry. MSB set to 0.
Use with:
n = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if result is zero.
N - Reset.
H - Reset.
C - Contains old bit 0 data.
Opcodes:
Instruction Parameters Opcode Cycles
SRL A CB 3F 8
SRL B CB 38 8
SRL C CB 39 8
SRL D CB 3A 8
SRL E CB 3B 8
SRL H CB 3C 8
SRL L CB 3D 8
SRL (HL) CB 3E 16
by DP Page 107
3.3.7. Bit Opcodes Game BoyTM CPU Manual
3.3.7. Bit Opcodes
1. BIT b,r
Description:
Test bit b in register r.
Use with:
b = 0 - 7, r = A,B,C,D,E,H,L,(HL)
Flags affected:
Z - Set if bit b of register r is 0.
N - Reset.
H - Set.
C - Not affected.
Opcodes:
Instruction Parameters Opcode Cycles
BIT b,A CB 47 8
BIT b,B CB 40 8
BIT b,C CB 41 8
BIT b,D CB 42 8
BIT b,E CB 43 8
BIT b,H CB 44 8
BIT b,L CB 45 8
BIT b,(HL) CB 46 16
Page 108 V 1.01
Game BoyTM CPU Manual 3.3.7. Bit Opcodes
2. SET b,r
Description:
Set bit b in register r.
Use with:
b = 0 - 7, r = A,B,C,D,E,H,L,(HL)
Flags affected:
None.
Opcodes:
Instruction Parameters Opcode Cycles
SET b,A CB C7 8
SET b,B CB C0 8
SET b,C CB C1 8
SET b,D CB C2 8
SET b,E CB C3 8
SET b,H CB C4 8
SET b,L CB C5 8
SET b,(HL) CB C6 16
by DP Page 109
3.3.7. Bit Opcodes Game BoyTM CPU Manual
3. RES b,r
Description:
Reset bit b in register r.
Use with:
b = 0 - 7, r = A,B,C,D,E,H,L,(HL)
Flags affected:
None.
Opcodes:
Instruction Parameters Opcode Cycles
RES b,A CB 87 8
RES b,B CB 80 8
RES b,C CB 81 8
RES b,D CB 82 8
RES b,E CB 83 8
RES b,H CB 84 8
RES b,L CB 85 8
RES b,(HL) CB 86 16
Page 110 V 1.01
Game BoyTM CPU Manual 3.3.8. Jumps
3.3.8. Jumps
1. JP nn
Description:
Jump to address nn.
Use with:
nn = two byte immediate value. (LS byte first.)
Opcodes:
Instruction Parameters Opcode Cycles
JP nn C3 12
2. JP cc,nn
Description:
Jump to address n if following condition is true:
cc = NZ, Jump if Z flag is reset.
cc = Z, Jump if Z flag is set.
cc = NC, Jump if C flag is reset.
cc = C, Jump if C flag is set.
Use with:
nn = two byte immediate value. (LS byte first.)
Opcodes:
Instruction Parameters Opcode Cycles
JP NZ,nn C2 12
JP Z,nn CA 12
JP NC,nn D2 12
JP C,nn DA 12
by DP Page 111
3.3.8. Jumps Game BoyTM CPU Manual
3. JP (HL)
Description:
Jump to address contained in HL.
Opcodes:
Instruction Parameters Opcode Cycles
JP (HL) E9 4
4. JR n
Description:
Add n to current address and jump to it.
Use with:
n = one byte signed immediate value
Opcodes:
Instruction Parameters Opcode Cycles
JR n 18 8
Page 112 V 1.01
Game BoyTM CPU Manual 3.3.8. Jumps
5. JR cc,n
Description:
If following condition is true then add n to current
address and jump to it:
Use with:
n = one byte signed immediate value
cc = NZ, Jump if Z flag is reset.
cc = Z, Jump if Z flag is set.
cc = NC, Jump if C flag is reset.
cc = C, Jump if C flag is set.
Opcodes:
Instruction Parameters Opcode Cycles
JR NZ,* 20 8
JR Z,* 28 8
JR NC,* 30 8
JR C,* 38 8
by DP Page 113
3.3.9. Calls Game BoyTM CPU Manual
3.3.9. Calls
1. CALL nn
Description:
Push address of next instruction onto stack and then
jump to address nn.
Use with:
nn = two byte immediate value. (LS byte first.)
Opcodes:
Instruction Parameters Opcode Cycles
CALL nn CD 12
Page 114 V 1.01
Game BoyTM CPU Manual 3.3.9. Calls
2. CALL cc,nn
Description:
Call address n if following condition is true:
cc = NZ, Call if Z flag is reset.
cc = Z, Call if Z flag is set.
cc = NC, Call if C flag is reset.
cc = C, Call if C flag is set.
Use with:
nn = two byte immediate value. (LS byte first.)

Opcodes:
Instruction Parameters Opcode Cycles
CALL NZ,nn C4 12
CALL Z,nn CC 12
CALL NC,nn D4 12
CALL C,nn DC 12
by DP Page 115
3.3.10. Restarts Game BoyTM CPU Manual
3.3.10. Restarts
1. RST n
Description:
Push present address onto stack.
Jump to address $0000 + n.
Use with:
n = $00,$08,$10,$18,$20,$28,$30,$38
Opcodes:
Instruction Parameters Opcode Cycles
RST 00H C7 32
RST 08H CF 32
RST 10H D7 32
RST 18H DF 32
RST 20H E7 32
RST 28H EF 32
RST 30H F7 32
RST 38H FF 32
Page 116 V 1.01
Game BoyTM CPU Manual 3.3.11. Returns
3.3.11. Returns
1. RET
Description:
Pop two bytes from stack & jump to that address.
Opcodes:
Instruction Parameters Opcode Cycles
RET -/- C9 8
2. RET cc
Description:
Return if following condition is true:
Use with:
cc = NZ, Return if Z flag is reset.
cc = Z, Return if Z flag is set.
cc = NC, Return if C flag is reset.
cc = C, Return if C flag is set.
Opcodes:
Instruction Parameters Opcode Cycles
RET NZ C0 8
RET Z C8 8
RET NC D0 8
RET C D8 8
by DP Page 117
3.3.11. Returns Game BoyTM CPU Manual
3. RETI
Description:
Pop two bytes from stack & jump to that address then
enable interrupts.
Opcodes:
Instruction Parameters Opcode Cycles
RETI -/- D9 8
Page 118 V 1.01
